Introduction
In this chapter we will explore the creation of graphical user interfaces (GUIs).Although console programs like the ones we have written in the preceding chapters are still very important,the majority of modern desktop applications have graphical user interfaces.Supplement 3G introduced a DrawingPanel class that allowed you to draw two-dimensional graphics on the screen.This class is useful for certain applications,but writing a GUI is not the same as drawing shapes and lines onto a canvas.A real graphical user interface includes window frames which you create that contain buttons,text input fields,and other onscreen components.
A major part of creating a graphical user interface in Java is figuring out how to position and lay out the components of the user interface to match the appearance you desire. Once you have chosen and laid out these components,you must make the events interactive by making them respond to various user events such as button clicks or mouse movements.There are many predefined components,but you can also define components that draw custom two-dimensional graphics,including animations.At the end of this chapter,we will reimplement a basic version of the DrawingPanel class from Supplement 3G.
14.1 GUI Basics  Graphical Input and Output with Option Panes  Working with Frames  Buttons, Text Fields, and Labels  Changing a Frame’s Layout  Handling an Event
14.2 Laying Out Components  Layout Managers  Composite Layouts
14.3 Interaction between Components  Example 1: BMI GUI  Object-Oriented GUIs  Example 2: Credit Card GUI
14.4 Additional Components and Events  Text Areas, Scrollbars, and Fonts  Icons  Mouse Events
14.5 Two-Dimensional Graphics  Drawing onto Panels  Animation with Timers
14.6 Case Study:Implementing DrawingPanel  Initial Version without Events  Second Version with Events
Chapter14 Graphical User Interfaces
822
M14_REGE1813_02_SE_C14.qxd  2/10/10  3:43 PM  Page 822
14.1 GUI Basics 823
14.1 GUI Basics
GUIs are potentially very complex entities because they involve a large number of interacting objects and classes. Each onscreen component and window is represented by an object, so a programmer starting out with GUIs must learn many new class, method, and package names. In addition, if the GUI is to perform sophisticated tasks, the objects must interact with each other and call each other’s methods, which raises tricky communication and scoping issues. Another factor that makes writing GUIs challenging is that the path of code execution becomes nondeterministic. When a GUI program is running, the user can click any of the buttons and interact with any of the other onscreen components in any order. Because the program’s execution is driven by the series of events that occur, we say that programs with GUIs are event-driven. In this chapter you’ll learn how to handle user events so that your event-driven graphical programs will respond appropriately to user interaction.
Graphical Input and Output with Option Panes The simplest way to create a graphical window in Java is to have an option pane pop up. An option pane is a simple message box that appears on the screen and presents a message or a request for input to the user. The Java class used to show option panes is called JOptionPane. JOptionPane belongs to the javax.swing package, so you’ll need to import this package to use it. (“Swing” is the name of one of Java’s GUI libraries.) Note that the package name starts with javax this time, not java. The x is because, in Java’s early days, Swing was an extension to Java’s feature set.
import javax.swing.*; // for GUI components
JOptionPane can be thought of as a rough graphical equivalent of System.out.println output and Scanner console input. The following program creates a “Hello, world!” message on the screen with the use of JOptionPane:
1  // A graphical equivalent of the classic "Hello world" program. 2 3  import javax.swing.*; // for GUI components 4 5  public class HelloWorld { 6      public static void main(String[] args) { 7          JOptionPane.showMessageDialog(null, "Hello, world!"); 8      } 9  }
The program produces the following graphical “output” (we’ll show screenshots for the output of the programs in this chapter):
M14_REGE1813_02_SE_C14.qxd  2/10/10  3:43 PM  Page 823
824 Chapter 14 Graphical User Interfaces
The window may look slightly different in different operating systems, but the message will be the same. The preceding program uses a static method in the JOptionPane class called showMessageDialog. This method accepts two parameters:a parent window and a message string to display. We don’t have a parent window in this case,so we passed null. JOptionPane can be used in three major ways: to display a message (as just demonstrated), to present a list of choices to the user, and to ask the user to type input. The three methods that implement these three behaviors are called showMessageDialog, showConfirmDialog, and showInputDialog, respectively. These methods are detailed in Table 14.1.
Table 14.1 Useful Methods of the JOptionPane Class Method Description
showConfirmDialog(parent, Shows a Yes/No/Cancel message box containing the given message) message on the screen and returns the choice as an int with 